{"version":3,"sources":["reducers/tableData.js","components/table/index.js","components/table/Table.js","components/spinner/index.js","components/spinner/Spinner.js","containers/TableContainer.js","actions/index.js","services/tableDataService.js","services/sourceURLs.js","components/app/index.js","components/app/App.js","reducers/index.js","store.js","index.js"],"names":["initialState","tableData","loading","error","Table","changeSortingParams","sortField","sortDirection","length","onClick","Object","keys","map","columnName","index","key","value","className","sort","a","b","row","cell","Spinner","TableContainer","props","bind","state","this","setTableData","localStorage","setItem","JSON","stringify","setState","parse","e","target","getAttribute","Component","connect","dispatch","type","async","fetch","response","ok","Error","status","json","console","getTableData","then","payload","catch","tableDataError","message","App","combineReducers","action","store","createStore","reducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c7b9f85.chunk.js","sourcesContent":["import { getTableData } from '../services/tableDataService';\r\nimport { tableDataRequested, tableDataLoaded, tableDataError } from '../actions';\r\n\r\nconst initialState = {\r\n  tableData: [],\r\n  loading: false,\r\n  error: null\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_TABLE_DATA_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      }\r\n    case 'FETCH_TABLE_DATA_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tableData: action.payload,\r\n        loading: false,\r\n        error: null\r\n      }\r\n    case 'FETCH_TABLE_DATA_FAILURE':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setTableData = () => dispatch => {\r\n  dispatch(tableDataRequested());\r\n  getTableData()\r\n    .then(response => dispatch(tableDataLoaded(response)))\r\n    .catch(error => dispatch(tableDataError(error.message)))\r\n}","import Table from './Table';\r\n\r\nexport default Table;","import React from 'react';\r\nimport './Table.scss';\r\n\r\nconst Table = ({ tableData, changeSortingParams, sortField, sortDirection }) => {\r\n\r\n  if (!tableData.length) return <p>Нет данных</p>\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr onClick={changeSortingParams}>\r\n          {Object.keys(tableData[0]).map((columnName, index) =>\r\n            <th key={index} value={columnName}>\r\n              {columnName}\r\n              {sortField === columnName && <span className={sortDirection}></span>}\r\n            </th>\r\n          )}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {tableData.sort((a, b) => {\r\n          if (sortDirection === 'asc') {\r\n            if (a[sortField] < b[sortField]) return -1\r\n          } else {\r\n            if (a[sortField] > b[sortField]) return -1\r\n          }\r\n          return 0\r\n        }).map((row, index) =>\r\n          <tr key={index}>\r\n            {Object.keys(row).map((cell, index) => <td key={index}>{row[cell]}</td>)}\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;","import Spinner from './Spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"Spinner\">\r\n      <div className=\"SpinnerElements\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setTableData } from '../reducers/tableData';\r\nimport Table from '../components/table';\r\nimport Spinner from '../components/spinner';\r\n\r\nclass TableContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.changeSortingParams = this.changeSortingParams.bind(this);\r\n\r\n    this.state = {\r\n      sortField: '',\r\n      sortDirection: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.setTableData();\r\n    if (!localStorage[\"AmazingHiringTable\"]) {\r\n      localStorage.setItem(\"AmazingHiringTable\", JSON.stringify({ sortField: '', sortDirection: '' }));\r\n    }\r\n    this.setState({\r\n      sortField: JSON.parse(localStorage[\"AmazingHiringTable\"]).sortField,\r\n      sortDirection: JSON.parse(localStorage[\"AmazingHiringTable\"]).sortDirection\r\n    })\r\n  }\r\n\r\n  changeSortingParams(e) {\r\n    if (!this.state.sortDirection\r\n      || this.state.sortDirection === 'desc'\r\n      || this.state.sortField !== e.target.getAttribute('value')) {\r\n      this.setState({ sortDirection: 'asc' });\r\n      localStorage[\"AmazingHiringTable\"] =\r\n        JSON.stringify({ sortField: e.target.getAttribute('value'), sortDirection: 'asc' });\r\n    } else {\r\n      this.setState({ sortDirection: 'desc' })\r\n      localStorage[\"AmazingHiringTable\"] =\r\n        JSON.stringify({ sortField: e.target.getAttribute('value'), sortDirection: 'desc' });\r\n    }\r\n    this.setState({ sortField: e.target.getAttribute('value') });\r\n  }\r\n\r\n  render() {\r\n    if (this.props.loading) return <Spinner />\r\n    return (\r\n      <Table\r\n        tableData={this.props.tableData}\r\n        changeSortingParams={this.changeSortingParams}\r\n        sortField={this.state.sortField}\r\n        sortDirection={this.state.sortDirection}\r\n      />\r\n    )\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ tableData: { tableData, loading, error } }) => {\r\n  return { tableData, loading, error }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTableData })(TableContainer);","const tableDataRequested = () => {\r\n  return {\r\n    type: 'FETCH_TABLE_DATA_REQUEST'\r\n  }\r\n}\r\n\r\nconst tableDataLoaded = tableData => {\r\n  return {\r\n    type: 'FETCH_TABLE_DATA_SUCCESS',\r\n    payload: tableData\r\n  }\r\n}\r\n\r\nconst tableDataError = error => {\r\n  return {\r\n    type: 'FETCH_TABLE_DATA_FAILURE',\r\n    payload: error\r\n  }\r\n}\r\n\r\nexport { tableDataRequested, tableDataLoaded, tableDataError };","import { getTableDataURL } from '../services/sourceURLs';\r\n\r\nexport const getTableData = async () => {\r\n  try {\r\n    const response = await fetch(getTableDataURL);\r\n    if (!response.ok) {\r\n      throw new Error(`Ошибка загрузки ${response.status}`)\r\n    } else {\r\n      return await response.json();\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка:', error);\r\n    return ('Ошибка при загрузке');\r\n  }\r\n}","const getTableDataURL = 'https://raw.githubusercontent.com/blmzv/ah-frontend-intern/master/profiles.json';\r\n\r\nexport { getTableDataURL }","import App from './App';\r\n\r\nexport default App;","import React from 'react';\r\nimport TableContainer from '../../containers/TableContainer';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <TableContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport tableData from './tableData';\r\n\r\nexport default combineReducers({\r\n  tableData\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport reducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/app';\nimport store from './store';\n\nimport './index.css';\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));"],"sourceRoot":""}